
AWSTemplateFormatVersion: "2010-09-09"
Description: Apache webserver
Parameters:
  SSHKey:
    Description: SSH key
    Type: AWS::EC2::KeyPair::KeyName
  SubnetId:
    Description: Subnet where lambda function should be running from
    Type: AWS::EC2::Subnet::Id
  S3Bucket:
    Description: S3 bucket where you have uploaded lambda function
    Type: String

Resources:
  WebServerGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      AvailabilityZones:
        Fn::GetAZs:
          Ref: "AWS::Region"
      LaunchConfigurationName:
        Ref: LaunchConfig
      MinSize: 1
      MaxSize: 2
      DesiredCapacity: 1
      LoadBalancerNames:
        - Ref: ElasticLoadBalancer
      Tags:
        - Key: Name
          Value: webserver
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
        Count: 1
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 0
        MaxBatchSize: 1
        PauseTime: PT15M
        WaitOnResourceSignals: true
  LaunchConfig:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              wget: []
              ruby: []
              httpd: []
          files:
            /etc/cfn/cfn-hup.conf:
              content:
                Fn::Join:
                  - ""
                  - - "[main]\n"
                    - "stack="
                    - !Ref "AWS::StackId"
                    - "\n"
                    - "region="
                    - !Ref "AWS::Region"
                    - "\n"
              mode: "000400"
              owner: "root"
              group: "root"
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content:
                Fn::Join:
                  - ""
                  - - "[cfn-auto-reloader-hook]\n"
                    - "triggers=post.update\n"
                    - "path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n"
                    - "action=/opt/aws/bin/cfn-init -v "
                    - "         --stack "
                    - !Ref "AWS::StackName"
                    - "         --resource LaunchConfig "
                    - "         --region "
                    - !Ref "AWS::Region"
                    - "\n"
                    - "runas=root\n"
          commands:
            download_codedeploy:
              cwd: /tmp
              command: "wget https://aws-codedeploy-us-west-2.s3.amazonaws.com/latest/install"
            # set_permission:
            #   cwd: /tmp
            #   command: "chmod +x install"
            # install_codedeploy:
            #   command: "/tmp/install auto"
          services:
            sysvinit:
              httpd:
                enabled: "true"
                ensureRunning: "true"
              cfn-hup:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - "/etc/cfn/cfn-hup.conf"
                  - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
              # codedeploy_agent:
              #   enabled: "true"
              #   ensureRunning: "true"
    Properties:
      ImageId: 'ami-1e299d7e'
      InstanceType: t2.medium
      KeyName: !Ref SSHKey
      IamInstanceProfile: CodeDeployEC2
      SecurityGroups:
        - Ref: InstanceSecurityGroup
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - "#!/bin/bash -xe\n"
            - "# Install the files and packages from the metadata\n"
            - "/opt/aws/bin/cfn-init -v "
            - "         --stack "
            -           !Ref AWS::StackName
            - "         --resource LaunchConfig "
            - "         --region "
            -           !Ref AWS::Region
            - "\n"
            # - "service httpd start\n"
            # - "wget https://aws-codedeploy-us-west-2.s3.amazonaws.com/latest/install\n"
            - "chmod +x /tmp/install\n"
            - "/tmp/install auto\n"
            - "# Signal the status from cfn-init\n"
            - "/opt/aws/bin/cfn-signal -e $? "
            - "         --stack "
            -           !Ref AWS::StackName
            - "         --resource WebServerGroup "
            - "         --region "
            -           !Ref AWS::Region
            - "\n"
  WebServerScaleUpPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: "WebServerGroup"
      Cooldown: 60
      ScalingAdjustment: 1
  WebServerScaleDownPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: "WebServerGroup"
      Cooldown: 60
      ScalingAdjustment: "-1"
  CPUAlarmHigh:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmDescription: "Scale-up if CPU > 90% for 10 minutes"
      MetricName: CPUUtilization
      Namespace: "AWS/EC2"
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 90
      AlarmActions:
        - Ref: WebServerScaleUpPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value:
            Ref: WebServerGroup
      ComparisonOperator: GreaterThanThreshold
  CPUAlarmLow:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmDescription: "Scale-down if CPU < 70% for 10 minutes"
      MetricName: CPUUtilization
      Namespace: "AWS/EC2"
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 70
      AlarmActions:
        - Ref: WebServerScaleDownPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value:
            Ref: WebServerGroup
      ComparisonOperator: LessThanThreshold
  ElasticLoadBalancer:
    Type: "AWS::ElasticLoadBalancing::LoadBalancer"
    Properties:
      AvailabilityZones:
        Fn::GetAZs:
          Ref: "AWS::Region"
      CrossZone: true
      Listeners:
        - LoadBalancerPort: '80'
          InstancePort: '80'
          Protocol: HTTP
      HealthCheck:
        Target: "HTTP:80/index.html"
        HealthyThreshold: 3
        UnhealthyThreshold: 5
        Interval: 10
        Timeout: 5
  InstanceSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Enable SSH access and HTTP from the load balancer only"
      SecurityGroupIngress:
       - IpProtocol: tcp
         FromPort: '22'
         ToPort: '22'
         CidrIp: 0.0.0.0/0
       - IpProtocol: tcp
         FromPort: '80'
         ToPort: '80'
         CidrIp: 0.0.0.0/0
  LifecycleHookLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: lifecycle_hooks.zip
      Handler: lifecycle_hooks.handler
      Role: !GetAtt [LifecycleHookrole, Arn]
      Runtime: python2.7
      Timeout: 180
      VpcConfig:
        SecurityGroupIds:
        - !GetAtt [InstanceSecurityGroup, GroupId]
        SubnetIds:
        - !Ref SubnetIds
  LifecycleHookrole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-asglifecycle
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
        Version: '2012-10-17'
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaENIManagementAccess
      - arn:aws:iam::aws:policy/AWSLambdaExecute
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                - ec2:DescribeInstances
                - ssm:GetParameters
                Effect: Allow
                Resource: '*'
  LyfecycleHook:
    Type: "AWS::AutoScaling::LifecycleHook"
    Properties:
      AutoScalingGroupName: !Ref WebServerGroup
      HeartbeatTimeout: 300
      LifecycleTransition: "autoscaling:EC2_INSTANCE_TERMINATING"
      NotificationTargetARN: arn:aws:sns:us-west-2:317816552148:CloudcustodianAlert
      RoleARN: arn:aws:iam::317816552148:role/asgnotification
  CloudWatchRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Trigger ASG lifecycle hook
      EventPattern:
        source:
        - aws.autoscaling
        detail-type:
        - "EC2 Instance-terminate Lifecycle Action"
        detail:
          AutoScalingGroupName:
          - !Ref WebServerGroup
      State: ENABLED
      Targets:
      -
        Arn:
          !GetAtt LifecycleHookLambda.Arn
        Id: ASGlifecycleRule
  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LifecycleHookLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt CloudWatchRule.Arn

Outputs:
  ELBName:
    Value: !GetAtt ElasticLoadBalancer.DNSName
  AutoscaleGroupName:
    Value: !Ref WebServerGroup
    Export:
      Name: !Sub "${AWS::StackName}-autoscaleName"
